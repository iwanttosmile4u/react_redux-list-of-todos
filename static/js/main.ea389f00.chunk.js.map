{"version":3,"sources":["store/actions.ts","components/TodoList/TodoList.tsx","store/index.ts","api/api.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionTypes","Options","setTodosAction","payload","type","SET_TODOS","setUserByIdAction","SET_USER","initialState","todos","user","store","createStore","state","action","BASE_URL","getTodos","a","fetch","response","json","getUser","userId","deleteTodo","todoId","method","getUserByIdSelector","TodoList","dispatch","useDispatch","useState","title","setTitle","status","setStatus","selectedUser","useSelector","loadTodosFromServer","todosFromServer","console","log","useEffect","query","getUserById","removeTodo","filteredByStatus","filter","todo","toLocaleLowerCase","includes","all","active","completed","className","placeholder","value","onChange","event","target","map","classNames","htmlFor","id","checked","readOnly","onClick","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea389f00.chunk.js","sourcesContent":["export enum ActionTypes {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  DELETE_TODO = 'DELETE_TODO',\n}\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: ActionTypes.SET_TODOS,\n  payload,\n});\n\nexport const setUserByIdAction = (payload: User | null): Action => ({\n  type: ActionTypes.SET_USER,\n  payload,\n});\n\nexport const deleteTodoAction = (payload: number): Action => ({\n  type: ActionTypes.DELETE_TODO,\n  payload,\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { deleteTodo, getTodos, getUser } from '../../api/api';\nimport { setTodosAction, setUserByIdAction } from '../../store/actions';\n// import { getTodosSelector } from '../../store/selectors';\nimport './TodoList.scss';\nimport {\n  getFilteredTodosSelector,\n  getUserByIdSelector,\n} from '../../store/selectors';\n\nenum Options {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n\n  const selectedUser = useSelector(getUserByIdSelector);\n\n  const loadTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const getUserById = async (userId: number) => {\n    try {\n      const user = await getUser(userId);\n\n      dispatch(setUserByIdAction(user));\n    } catch (error) {\n      dispatch(setUserByIdAction(null));\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const removeTodo = async (todoId: number) => {\n    await deleteTodo(todoId);\n    const todosFromServer = await getTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  const filteredByTitle = useSelector(getFilteredTodosSelector(title));\n\n  const filteredByStatus = filteredByTitle.filter(todo => {\n    switch (status) {\n      case Options.all:\n        return true;\n\n      case Options.active:\n        return !todo.completed;\n\n      case Options.completed:\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter the title\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n\n      <select\n        value={status}\n        onChange={(event) => setStatus(event.target.value)}\n      >\n        <option value=\"all\"> All </option>\n        <option value=\"active\"> Active </option>\n        <option value=\"completed\"> Completed </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {\n            filteredByStatus.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`${todo.id}`}\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <div>\n                  <button\n                    className={classNames(\n                      'TodoList__user-button',\n                      {\n                        'TodoList__user-button--selected':\n                        selectedUser?.id === todo.userId,\n                      },\n                      'button',\n                    )}\n                    type=\"button\"\n                    onClick={() => {\n                      getUserById(todo.userId);\n                    }}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => {\n                      removeTodo(todo.id);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { createStore } from 'redux';\nimport { ActionTypes } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case ActionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  const response = await fetch(`${BASE_URL}/todos/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getUserByIdSelector = (state: State) => state.user;\nexport const getFilteredTodosSelector = (query: string) => {\n  return (state: State) => (state.todos\n    .filter((todo: Todo) => todo.title.toLocaleLowerCase()\n      .includes(query.toLocaleLowerCase())));\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserByIdAction } from '../../store/actions';\nimport { getUserByIdSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(getUserByIdSelector);\n\n  const deleteUser = () => {\n    dispatch(setUserByIdAction(null));\n  };\n\n  return (\n    <>\n      {selectedUser\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${selectedUser?.id}`}</span>\n            </h2>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={deleteUser}\n            >\n              Clear\n            </button>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n          </div>\n        ) : 'No selected user'}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}